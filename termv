#!/usr/bin/env bash

VERSION=1.0

CHANNEL_FILE="$HOME/.config/termv/channels.json"

FULL_SCREEN=false

DEVOUR=false

MPV_FLAGS="--no-resume-playback"

play(){
    if [ -n "$1" ]; then
        echo "please wait"
        [ "$FULL_SCREEN" = true ] && MPV_FLAGS="$MPV_FLAGS --fs"
        if type devour >/dev/null && [ "$DEVOUR" = true ]; then
            WID=$(xdo id)
            xdo hide
            mpv "$1" $MPV_FLAGS
            xdo show $WID
        else
            mpv "$1" $MPV_FLAGS
        fi
    fi
}

select_channel(){
    local fzf_opts=(--cycle --header="Select channel (Press Escape to exit)")
    local name var
    while name=$(cat "$CHANNEL_FILE" | jq ".[].name" | tr -d '"' |\
                 sort | fzf "${fzf_opts[@]}"); do
        var=".[] | select(.name==\"$name\") | .url"
        play "$(cat $CHANNEL_FILE | jq "$var" | tr -d '"')"
    done
}

dep_check(){
    deps=(mpv fzf jq wget cat)
    for dep in ${deps[@]}; do
        command -v "$dep" 1>/dev/null || missing="$missing $dep"
    done;

    if [ -n "$missing" ]; then
        printf "Please install missing dep(s):$missing\n";
        exit 1
    fi

    mkdir -p "${CHANNEL_FILE%channels.json}"

    if [[ ! -f "$CHANNEL_FILE" ]];then 
        echo "Downloading channel list "; 
        wget -q --show-progress https://iptv-org.github.io/iptv/channels.json -O "$CHANNEL_FILE" ||\
            print_error "Cannot download channel list" 
    fi

    select_channel
}

print_error() {
    # Print error message
    #
    # The first argument provided to this function will be the error message.
    # Script will exit after printing the error message.
    printf "%b\n" "Error: $1" >&2
    exit 1
}

usage() {
    # Using 'cat << EOF' we can easily output a multiline text. This is much
    # better than using 'echo' for each line or using '\n' to create a new line.


    cat <<EOF
termv

A command line program to watch TV online.

-f, --full-screen 
        Opens mpv in fullscreen
-h, --help
        Show help
-s, --swallow
        Swallow terminal when mpv opens
        based on devour, https://github.com/salman-abedin/devour
-v, --version
        Show version
EOF
}

version(){
    echo "termv $VERSION"
}

main(){
    [ $# -eq 0 ] && dep_check && exit

    while [ "$1" ]; do
        case "$1" in
            --help | -h) usage && exit ;;
            --version | -v) version && exit ;;
            --full-screen | -f) FULL_SCREEN=true && dep_check;;
            --swallow | -s) DEVOUR=true && dep_check;;
            -*) print_error "option '$1' does not exist" ;;
        esac
        shift
    done
}

main "$@"
