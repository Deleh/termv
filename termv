#!/usr/bin/env bash

termv_version=1.1

termv_cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/termv"

channels_url="https://iptv-org.github.io/iptv/channels.json"

FULL_SCREEN=false

SWALLOW=false

MPV_FLAGS="--no-resume-playback"

mkdir -p "${termv_cache_dir}"

# check if app installed ; ignores aliases
has() {
    case "$(command -v "$1" 2>/dev/null)" in
        alias*|"") return 1
    esac
}

phi() {
    >&2 printf "    %s , %s %s\n" "$1" "$2" "$3"
}

pht() {
    >&2 printf "%s\n" "$@"
}

# print error message & exit
pemx() {
    >&2 printf '\033[31;1merror :\033[m %s\n' "$@" && exit 1
}

usage() {
    pht "Usage:   termv [options] [channelname]"
    pht
    pht "Options:"

    phi -h "--help       " "Print this help text and exit"
    phi -v "--version    " "Print program version and exit"
    phi -u "--update     " "Update channel list to latest version."
    phi -f "--full-screen" "open mpv in fullscreen"
    phi -s "--swallow    " "Swallow terminal during playback (X11 only) based on devour; https://github.com/salman-abedin/devour.sh"
}

version(){
    pht "termv ${termv_version}"
}

update_channefile(){
    etagPath="${termv_cache_dir}/etag"
    printf '%s' "Downloading ${channels_url:?}... "
    [ -f "$etagPath" ] && oldetag=$(cat "$etagPath") || oldetag="null"

    curl -s "${channels_url}" --etag-compare "${etagPath:?}" --etag-save "${etagPath:?}" -o "${termv_cache_dir}/data.json" \
    -H "accept-encoding:gzip" --compressed  && downloaded=1 || downloaded=0

    newetag=$(cat "$etagPath")
    if [ $downloaded -eq 1 ] && [ "$newetag" = "$oldetag" ]; then
        printf '\033[33;1m %s \033[0m\n' "not modified!!" ;
    elif [ $downloaded -eq 1 ]; then
        printf '\033[32;1m %s \033[0m\n' "DONE !!" ;
    elif [ $downloaded -eq 0 ]; then
        printf '\033[31;1m %s \033[0m\n' "Fail !!" && rm -f "$etagPath" && exit 1
    fi
}

# check if necessary programs are installed
for prog in mpv fzf jq wget cat; do
     ! has "$prog" && dependences_not_installed="$dependences_not_installed$prog, "
done

[ -n "${dependences_not_installed}" ] && pemx "You have missing dependencies. you need to install: ${dependences_not_installed::-2}."

while [ "$1" ]; do
    case "$1" in
        -h|--help) usage && exit 0 ;;
        -v|--version) version && exit 0 ;;
        -u|--update)  update_channefile ; exit;;
        -f|--full-screen) FULL_SCREEN=true ; shift;;
        -s|--swallow )    SWALLOW=true     ; shift;;
        *) query="$query $1" ; shift;;
    esac
done

[ -z "$query" ] && query=""

[ "${SWALLOW}" = true ] && { ! has "xdo" && pemx "You have a missing dependencie for -s flag. you need to install: xdo."; }

[ "$FULL_SCREEN" = true ] && MPV_FLAGS="$MPV_FLAGS --fs"

# update channel list if it's older than one day
if [ ! "$(stat -c %y "${termv_cache_dir}/data.json" 2>/dev/null | cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ] ;then
    update_channefile
fi

play()(
    if [ -n "$1" ]; then
        pht "Fetching channel, please wait..."
        if [ "$SWALLOW" = true ]; then
            WID=$(xdo id)
            xdo hide
            mpv "$1" "$MPV_FLAGS" --force-window=immediate
            xdo show "$WID" && xdo activate "$WID"
        else
            mpv "$1" "$MPV_FLAGS"
        fi
    fi
)

main(){
    while :; do
        m3u8_url=$(jq -r '.[] | "\(.name)  [\(.category)]  [\(.languages|.[0].name)]  [\(.countries|.[0].name)]  \(.url)"' "${termv_cache_dir}/data.json" | \
                fzf --cycle --header="Select channel (press Escape to exit)" --with-nth='1..-2' -e -i -q "$@" | \
                awk '{print $NF}' \
                )

        [ -z "$m3u8_url" ] && exit 0

        play "$m3u8_url"
    done
}

main "$query"
